--------------------------------------------------------------------------
-- Copyright (c) 2007-2012, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, CAB F.78, Universitaetstr. 6, CH-8092 Zurich. 
-- Attn: Systems Group.
--
-- Hakefile for Barrelfish CPU drivers
-- 
--------------------------------------------------------------------------

--
-- Missing from this new Hakefile is the rule to build kernel debug
-- symbols, since this requires some thinking about naming
-- conventions.  Here is the rule we need:
--
--                Rule ( [ Str "OBJDUMP=objdump",
--                         In SrcTree "src" "/tools/gen-gdbscript.sh",
--                         In SrcTree "src" "/tools/debug.gdb.in",
--                         In BuildTree arch "../sbin/cpu",
--                         Str ">", Out arch "/debug.gdb"
--                        ] )



let
  scheduler = case Config.scheduler of
      Config.RR   -> "schedule_rr.c"
      Config.RBED -> "schedule_rbed.c"
  common_c = [ "gdb_stub.c", 
               "capabilities.c", 
               "dispatch.c",
               scheduler, 
               "memset.c", 
               "memmove.c", 
               "printf.c",
               "startup.c", 
               "stdlib.c", 
               "string.c", 
               "syscall.c",
               "wakeup.c", 
               "useraccess.c" ]
             ++ (if Config.microbenchmarks then ["microbenchmarks.c"] else [])
             ++ (if Config.oneshot_timer then ["timer.c"] else [])
  common_libs = [ "getopt", "mdb_kernel" ]
  
  link_cpudriver arg = linkKernel opts name objs libs
    where 
      opts = (kernelOptions $ head $ Args.architectures arg)
      suffix = if "cpu" == Args.target arg 
             then "" 
             else "_" ++ (Args.target arg)
      name = "cpu" ++ suffix
      objs = [ objectFilePath opts f 
             | f <- (Args.assemblyFiles arg) ++ (Args.cFiles arg) ++ common_c ] 
      libs = (Args.addLibraries arg) ++ common_libs
    
  cpudrivers arglist = 
    let 
      cafiles = List.nub $ concat [ [ [ arch, cfile ] 
                                    | arch <- Args.architectures arg,
                                      cfile <- common_c ++ (Args.cFiles arg) ]
                                  | arg <- arglist ]
      safiles = List.nub $ concat [ [ [ arch, sfile ]
                                    | arch <- Args.architectures arg,
                                      sfile <- Args.assemblyFiles arg ]
                                  | arg <- arglist ]
      mafiles = List.nub $ concat [ [ [ arch, mfile ]
                                    | arch <- Args.architectures arg,
                                      mfile <- Args.mackerelDevices arg ]
                                  | arg <- arglist ]
    in
     ( [ compileCFile (kernelOptions a) f | [a,f] <- cafiles ]
       ++
       [ assembleSFile (kernelOptions a) f | [a,f] <- safiles ]
       ++
       [ mackerelDependencies (kernelOptions a) f [ c | [a,c] <- cafiles]  
       | [a,f] <- mafiles ]
       ++
       [ link_cpudriver arg | arg <- arglist ]
     )
         
  in cpudrivers [
  --
  -- Generic Intel/AMD amd64 64-bit x86 core
  --
  cpuDriver { 
     architectures = [ "x86_64" ],
     assemblyFiles = [ "arch/x86_64/boot.S", 
                       "arch/x86_64/entry.S", 
                       "arch/x86/init_ap_x86_64.S", 
                       "arch/x86/init_ap_x86_32.S" ],
     cFiles = [ "arch/x86_64/debug.c", 
                "arch/x86_64/gdb_arch.c", 
                "arch/x86_64/init.c", 
                "arch/x86_64/irq.c",
                "arch/x86_64/startup_arch.c", 
                "arch/x86_64/exec.c", 
                "arch/x86_64/syscall.c", 
                "arch/x86_64/paging.c",
                "arch/x86_64/vmkit.c" , 
                "arch/x86_64/page_mappings_arch.c",
                "arch/x86/apic.c", 
                "arch/x86/pic.c", 
                "arch/x86/start_aps.c", 
                "arch/x86/cmos.c", 
                "arch/x86/misc.c",
                "arch/x86/serial.c", 
                "arch/x86/multiboot.c", 
                "arch/x86/conio.c", 
                "arch/x86/syscall.c", 
                "arch/x86/debugregs.c",
                "arch/x86/perfmon.c", 
                "arch/x86/perfmon_intel.c", 
                "arch/x86/perfmon_amd.c", 
                "arch/x86/rtc.c", 
                "arch/x86/timing.c",
                "arch/x86/startup_x86.c", 
                "arch/x86/mcheck.c", 
                "arch/x86/ipi_notify.c"
              ],
     mackerelDevices = [ "lpc_pic", 
                         "pc16550d", 
                         "ia32", 
                         "amd64", 
                         "xapic", 
                         "amd_vmcb", 
                         "cpuid", 
                         "lpc_rtc" ],
     addLibraries = [ "elf_kernel" ]
     },
  --
  -- Generic Intel ia32 32-bit x86 core
  --
  cpuDriver { 
     architectures = [ "x86_32" ],
     assemblyFiles = [ "arch/x86_32/boot.S", 
                       "arch/x86_32/entry.S", 
                       "arch/x86_32/pic.S",
                       "arch/x86/init_ap_x86_64.S", 
                       "arch/x86/init_ap_x86_32.S" ],
     cFiles = [ "arch/x86_32/debug.c", 
                "arch/x86_32/gdb_arch.c", 
                "arch/x86_32/init.c", 
                "arch/x86_32/irq.c",
                "arch/x86_32/startup_arch.c", 
                "arch/x86_32/exec.c", 
                "arch/x86_32/syscall.c", 
                "arch/x86_32/paging.c",
                "arch/x86_32/page_mappings_arch.c",
                "arch/x86/apic.c", 
                "arch/x86/pic.c", 
                "arch/x86/start_aps.c", 
                "arch/x86/cmos.c", 
                "arch/x86/misc.c",
                "arch/x86/serial.c", 
                "arch/x86/multiboot.c", 
                "arch/x86/conio.c", 
                "arch/x86/syscall.c", 
                "arch/x86/debugregs.c",
                "arch/x86/perfmon.c", 
                "arch/x86/perfmon_intel.c", 
                "arch/x86/perfmon_amd.c", 
                "arch/x86/rtc.c", 
                "arch/x86/timing.c",
                "arch/x86/startup_x86.c", 
                "arch/x86/ipi_notify.c"
              ],
     mackerelDevices = [ "lpc_pic", 
                         "pc16550d", 
                         "ia32", 
                         "amd64", 
                         "xapic", 
                         "cpuid", 
                         "lpc_rtc" ],
     addLibraries = [ "elf_kernel" ]
     },
  --
  -- Intel Gauss Lake P54C core in the Rock Creek Single-Chip Cloud Computer
  --
  cpuDriver { 
     architectures = [ "scc" ],
     assemblyFiles = [ "arch/scc/boot.S",
                       "arch/x86_32/entry.S", 
                       "arch/x86_32/pic.S" ],
     cFiles = [ "arch/scc/rck.c",
                "arch/x86_32/debug.c", 
                "arch/x86_32/gdb_arch.c", 
                "arch/x86_32/init.c", 
                "arch/x86_32/irq.c",
                "arch/x86_32/startup_arch.c", 
                "arch/x86_32/exec.c", 
                "arch/x86_32/syscall.c", 
                "arch/x86_32/paging.c",
                "arch/x86_32/page_mappings_arch.c",
                "arch/x86/apic.c", 
                "arch/x86/misc.c",
                "arch/x86/serial.c", 
                "arch/x86/multiboot.c", 
                "arch/x86/syscall.c", 
                "arch/x86/debugregs.c",
                "arch/x86/timing.c",
                "arch/x86/startup_x86.c"
              ],
     mackerelDevices = [ "pc16550d", 
                         "ia32", 
                         "xapic", 
                         "rck", 
                         "eMAC", 
                         "cpuid", 
                         "lpc_rtc" ],
     addLibraries = [ "elf_kernel" ]
     },
  --
  -- Generic ARMv5 core, unused?
  --
  cpuDriver {
     architectures = [ "armv5" ],
     assemblyFiles = [ "arch/armv5/boot.S", 
                       "arch/armv5/exceptions.S" ],
     cFiles = [ "arch/arm/exn.c", 
                "arch/arm/exec.c", 
                "arch/arm/misc.c", 
                "arch/arm/phys_mmap.c", 
                "arch/armv5/init.c", 
                "arch/armv5/integrator.c", 
                "arch/armv5/kludges.c", 
                "arch/armv5/kputchar.c", 
                "arch/armv5/pl011_uart.c", 
                "arch/armv5/paging.c", 
                "arch/armv5/startup_arch.c", 
                "arch/armv5/syscall.c" ],
     mackerelDevices = [ "arm", 
                         "arm_icp_pit", 
                         "arm_icp_pic0", 
                         "pl011_uart" ],
     addLibraries = [ "elf", "cpio" ]
     },
  --
  -- ARM11MP ARMv6 core, currently unsupported.
  -- XXX: reorganize sources for ARMv6
  --
  cpuDriver {
     architectures = [ "arm11mp" ],
     assemblyFiles = [ "arch/armv5/boot.S", 
                       "arch/armv5/exceptions.S", 
                       "arch/paging_cp.S" ],
     cFiles = [ "arch/arm/exn.c", 
                "arch/arm/exec.c", 
                "arch/arm/misc.c", 
                "arch/arm/phys_mmap.c", 
                "arch/armv5/init.c", 
                "arch/armv5/integrator.c", 
                "arch/armv5/kludges.c", 
                "arch/armv5/kputchar.c", 
                "arch/armv5/pl011_uart.c", 
                "arch/armv5/paging.c", 
                "arch/armv5/startup_arch.c", 
                "arch/armv5/syscall.c" ],
     mackerelDevices = [ "arm", 
                         "arm_icp_pit", 
                         "arm_icp_pic0", 
                         "pl011_uart" ],
     addLibraries = [ "elf", "cpio" ]
     },
  --
  -- ARM Gem5 Cortex-A series ARMv7 core
  --
  cpuDriver { 
    target = "arm_gem5",
    architectures = [ "armv7" ],
    assemblyFiles = [ "arch/arm_gem5/boot.S",
                      "arch/armv7/cp15.S",
                      "arch/armv7/exceptions.S" ],
    cFiles = [ "arch/arm/exec.c", 
               "arch/arm/misc.c", 
               "arch/arm/phys_mmap.c",
               "arch/arm/exn.c", 
               "arch/arm_gem5/init.c", 
               "arch/arm_gem5/integrator.c", 
               "arch/arm_gem5/paging.c", 
               "arch/arm_gem5/gem5_serial.c", 
               "arch/arm_gem5/pl011_uart.c", 
               "arch/arm_gem5/startup_arch.c", 
               "arch/armv7/syscall.c", 
               "arch/armv7/kludges.c", 
               "arch/armv7/multiboot.c", 
               "arch/arm_gem5/start_aps.c", 
               "arch/armv7/kputchar.c" ],
    mackerelDevices = [ "arm", 
                        "arm_icp_pit", 
                        "pl011_uart", 
                        "pl130_gic", 
                        "sp804_pit", 
                        "cortex_a9_pit", 
                        "a9scu" ],
    addLibraries = [ "elf", "cpio" ],
    addCFlags = [ "-D__GEM5__" ]
    },
  --
  -- Intel ixp2800 XScale core
  --
  cpuDriver {
     target = "ixp2800",
     architectures = [ "xscale" ],
     assemblyFiles = [ "arch/xscale/boot.S", 
                       "arch/armv5/exceptions.S"  ],
     cFiles = [ "arch/arm/exn.c", 
                "arch/arm/exec.c", 
                "arch/arm/misc.c", 
                "arch/arm/phys_mmap.c", 
                "arch/armv5/init.c", 
                "arch/armv5/kludges.c", 
                "arch/armv5/startup_arch.c", 
                "arch/armv5/syscall.c", 
                "arch/xscale/ixp2800_integrator.c", 
                "arch/xscale/ixp2800_uart.c", 
                "arch/xscale/ixp2800_paging.c", 
                "arch/xscale/kputchar.c" ],
     mackerelDevices = [ "arm", 
                         "ixp2800_icp_pit", 
                         "ixp2800_icp_pic0", 
                         "ixp2800_uart" ],
     addLibraries = [ "elf", "cpio" ]
     },
  --
  -- Broadcom OMAP44xx-series dual-core Cortex-A9 SoC
  --
  cpuDriver {
     target = "omap44xx",
     architectures = [ "armv7" ],
     assemblyFiles = [ "arch/omap44xx/boot.S",
                       "arch/armv7/cp15.S",
                       "arch/armv7/exceptions.S" ],
     cFiles = [ "arch/arm/exec.c", 
                "arch/arm/misc.c", 
                "arch/arm/exn.c", 
                "arch/arm/phys_mmap.c",
                "arch/armv7/kludges.c", 
                "arch/armv7/multiboot.c", 
                "arch/armv7/syscall.c", 
                "arch/omap44xx/init.c", 
                "arch/omap44xx/omap.c", 
                "arch/omap44xx/paging.c", 
                "arch/omap44xx/startup_arch.c", 
                "arch/omap44xx/omap_uart.c", 
                "arch/omap44xx/start_aps.c", 
                "arch/armv7/kputchar.c" ],
     mackerelDevices = [ "arm", 
                         "arm_icp_pit", 
                         "pl130_gic", 
                         "sp804_pit", 
                         "cortex_a9_pit", 
                         "a9scu", 
                         "omap/omap_uart", 
                         "omap/omap44xx_id", 
                         "omap/omap44xx_emif",
                         "omap/omap44xx_gpio"],
     addLibraries = [ "elf", "cpio" ]
     }                            
  
  ]
